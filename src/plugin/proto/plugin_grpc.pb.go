// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: plugin.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PluginService_Status_FullMethodName   = "/eventsbridge.plugin.v1.PluginService/Status"
	PluginService_Shutdown_FullMethodName = "/eventsbridge.plugin.v1.PluginService/Shutdown"
	PluginService_Source_FullMethodName   = "/eventsbridge.plugin.v1.PluginService/Source"
	PluginService_Runner_FullMethodName   = "/eventsbridge.plugin.v1.PluginService/Runner"
	PluginService_Target_FullMethodName   = "/eventsbridge.plugin.v1.PluginService/Target"
)

// PluginServiceClient is the client API for PluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginServiceClient interface {
	Status(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusRes, error)
	Shutdown(ctx context.Context, in *ShutdownReq, opts ...grpc.CallOption) (*ShutdownRes, error)
	Source(ctx context.Context, in *SourceReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PluginMessage], error)
	Runner(ctx context.Context, in *PluginMessage, opts ...grpc.CallOption) (*PluginMessage, error)
	Target(ctx context.Context, in *PluginMessage, opts ...grpc.CallOption) (*TargetRes, error)
}

type pluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginServiceClient(cc grpc.ClientConnInterface) PluginServiceClient {
	return &pluginServiceClient{cc}
}

func (c *pluginServiceClient) Status(ctx context.Context, in *StatusReq, opts ...grpc.CallOption) (*StatusRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusRes)
	err := c.cc.Invoke(ctx, PluginService_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) Shutdown(ctx context.Context, in *ShutdownReq, opts ...grpc.CallOption) (*ShutdownRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShutdownRes)
	err := c.cc.Invoke(ctx, PluginService_Shutdown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) Source(ctx context.Context, in *SourceReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PluginMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PluginService_ServiceDesc.Streams[0], PluginService_Source_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SourceReq, PluginMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PluginService_SourceClient = grpc.ServerStreamingClient[PluginMessage]

func (c *pluginServiceClient) Runner(ctx context.Context, in *PluginMessage, opts ...grpc.CallOption) (*PluginMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PluginMessage)
	err := c.cc.Invoke(ctx, PluginService_Runner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) Target(ctx context.Context, in *PluginMessage, opts ...grpc.CallOption) (*TargetRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TargetRes)
	err := c.cc.Invoke(ctx, PluginService_Target_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServiceServer is the server API for PluginService service.
// All implementations must embed UnimplementedPluginServiceServer
// for forward compatibility.
type PluginServiceServer interface {
	Status(context.Context, *StatusReq) (*StatusRes, error)
	Shutdown(context.Context, *ShutdownReq) (*ShutdownRes, error)
	Source(*SourceReq, grpc.ServerStreamingServer[PluginMessage]) error
	Runner(context.Context, *PluginMessage) (*PluginMessage, error)
	Target(context.Context, *PluginMessage) (*TargetRes, error)
	mustEmbedUnimplementedPluginServiceServer()
}

// UnimplementedPluginServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPluginServiceServer struct{}

func (UnimplementedPluginServiceServer) Status(context.Context, *StatusReq) (*StatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedPluginServiceServer) Shutdown(context.Context, *ShutdownReq) (*ShutdownRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedPluginServiceServer) Source(*SourceReq, grpc.ServerStreamingServer[PluginMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Source not implemented")
}
func (UnimplementedPluginServiceServer) Runner(context.Context, *PluginMessage) (*PluginMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Runner not implemented")
}
func (UnimplementedPluginServiceServer) Target(context.Context, *PluginMessage) (*TargetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Target not implemented")
}
func (UnimplementedPluginServiceServer) mustEmbedUnimplementedPluginServiceServer() {}
func (UnimplementedPluginServiceServer) testEmbeddedByValue()                       {}

// UnsafePluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServiceServer will
// result in compilation errors.
type UnsafePluginServiceServer interface {
	mustEmbedUnimplementedPluginServiceServer()
}

func RegisterPluginServiceServer(s grpc.ServiceRegistrar, srv PluginServiceServer) {
	// If the following call pancis, it indicates UnimplementedPluginServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PluginService_ServiceDesc, srv)
}

func _PluginService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).Status(ctx, req.(*StatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).Shutdown(ctx, req.(*ShutdownReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_Source_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SourceReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PluginServiceServer).Source(m, &grpc.GenericServerStream[SourceReq, PluginMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PluginService_SourceServer = grpc.ServerStreamingServer[PluginMessage]

func _PluginService_Runner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).Runner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_Runner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).Runner(ctx, req.(*PluginMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_Target_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).Target(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_Target_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).Target(ctx, req.(*PluginMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginService_ServiceDesc is the grpc.ServiceDesc for PluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eventsbridge.plugin.v1.PluginService",
	HandlerType: (*PluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _PluginService_Status_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _PluginService_Shutdown_Handler,
		},
		{
			MethodName: "Runner",
			Handler:    _PluginService_Runner_Handler,
		},
		{
			MethodName: "Target",
			Handler:    _PluginService_Target_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Source",
			Handler:       _PluginService_Source_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "plugin.proto",
}
