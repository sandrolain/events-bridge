version: "3"

vars:
  # All Go source files (excluding vendor)
  GO_FILES:
    sh: find . -type f -name '*.go' -not -path "./vendor/*"
  # Package list for analysis scoped to project sources
  GO_PKGS:
    sh: go list ./src/...

tasks:
  default:
    desc: Run default checks (fmt, lint, vet, test)
    cmds:
      - task: fmt
      - task: lint
      - task: vet
      - task: test

  install-tools-mac:
    desc: Install all required Go tools and Trivy on macOS
    cmds:
      - brew install golangci-lint
      - brew install gosec
      - brew install aquasecurity/trivy/trivy

  fmt:
    desc: Format Go code with simplification
    cmds:
      - echo "Running gofmt..."
      - gofmt -s -l -w .

  lint:
    desc: Run golangci-lint across the codebase
    cmds:
      - echo "Running golangci-lint..."
      - golangci-lint run

  vet:
    desc: Run static analysis with go vet
    cmds:
      - echo "Running go vet..."
      - go vet ./src/...

  test:
    desc: Run tests with race detector and coverage
    cmds:
      - echo "Running tests with coverage..."
      - go test -v -race -coverprofile=coverage.out -covermode=atomic ./src/...
      - go tool cover -html=coverage.out -o coverage.html

  gosec:
    desc: Run security checks with gosec
    vars:
      GOSEC_INSTALLED:
        sh: command -v gosec || echo "not_found"
    cmds:
      - echo "Running gosec security scanner..."
      - gosec -fmt=json -out=security-report.json ./src/...

  trivy:
    desc: Run Trivy filesystem scanner (vuln, secret, misconfig)
    vars:
    cmds:
      - echo "Running Trivy vulnerability scanner..."
      - trivy fs --scanners vuln,secret,misconfig .
      - trivy fs --format json --output trivy-results.json .

  check:
    desc: Run all checks (fmt, lint, vet, test, gosec, trivy)
    cmds:
      - task: fmt
      - task: lint
      - task: vet
      - task: test
      - task: gosec
      - task: trivy

  install-deps:
    desc: Install and tidy Go module dependencies
    cmds:
      - go mod download
      - go mod tidy

  clean:
    desc: Clean build and analysis artifacts
    cmds:
      - go clean
      - rm -rf bin/
      - rm -rf dist/
      - rm -f coverage.out
      - rm -f coverage.html
      - rm -f security-report.json
      - rm -f trivy-results.json

  build:
    cmds:
      - rm -rf ./bin
      - mkdir -p ./bin/connectors
      - mkdir -p ./bin/runners
      - go build -buildmode=plugin -o ./bin/connectors/http.so ./src/connectors/http && du -h ./bin/connectors/http.so
      - go build -buildmode=plugin -o ./bin/connectors/coap.so ./src/connectors/coap && du -h ./bin/connectors/coap.so
      - go build -buildmode=plugin -o ./bin/connectors/nats.so ./src/connectors/nats && du -h ./bin/connectors/nats.so
      - go build -buildmode=plugin -o ./bin/connectors/mqtt.so ./src/connectors/mqtt && du -h ./bin/connectors/mqtt.so
      - go build -buildmode=plugin -o ./bin/connectors/pgsql.so ./src/connectors/pgsql && du -h ./bin/connectors/pgsql.so
      - go build -buildmode=plugin -o ./bin/connectors/kafka.so ./src/connectors/kafka && du -h ./bin/connectors/kafka.so
      - go build -buildmode=plugin -o ./bin/connectors/redis.so ./src/connectors/redis && du -h ./bin/connectors/redis.so
      - go build -buildmode=plugin -o ./bin/connectors/git.so ./src/connectors/git && du -h ./bin/connectors/git.so
      - go build -buildmode=plugin -o ./bin/runners/es5runner.so ./src/runners/es5runner && du -h ./bin/runners/es5runner.so
      - go build -buildmode=plugin -o ./bin/runners/wasmrunner.so ./src/runners/wasmrunner && du -h ./bin/runners/wasmrunner.so
      - go build -buildmode=plugin -o ./bin/runners/gptrunner.so ./src/runners/gptrunner && du -h ./bin/runners/gptrunner.so
      - go build -buildmode=plugin -o ./bin/runners/jlorunner.so ./src/runners/jlorunner && du -h ./bin/runners/jlorunner.so
      - go build -o ./bin/events-bridge ./src  && du -h ./bin/events-bridge

  test-coap:
    cmds:
      - viddy go run ./coapclient 'localhost:5683' '/event' '{"test":123}'

  test-http:
    cmds:
      - 'viddy curl -X POST -H ''Content-Type: application/json'' -d ''{"test":123}'' ''http://localhost:8080/event'''

  test-nats:
    cmds:
      - viddy nats pub event.subject '{"test":123}' --server nats://localhost:4222

  gen-plugin-proto:
    dir: ./src/plugin/proto
    cmds:
      - protoc --proto_path=. --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative ./plugin.proto

  build-testers:
    dir: ./testers
    cmds:
      - mkdir -p ./bin
      - go build -o ./bin/concurrently ./concurrently && du -h ./bin/concurrently
      - go build -o ./bin/natssource ./sources/natssource && du -h ./bin/natssource
      - go build -o ./bin/coapsource ./sources/coapsource && du -h ./bin/coapsource
      - go build -o ./bin/pgsqlsource ./sources/pgsqlsource && du -h ./bin/pgsqlsource
      - go build -o ./bin/mqttsource ./sources/mqttsource && du -h ./bin/mqttsource
      - go build -o ./bin/httpsource ./sources/httpsource && du -h ./bin/httpsource
      - go build -o ./bin/kafkasource ./sources/kafkasource && du -h ./bin/kafkasource
      - go build -o ./bin/redissource ./sources/redissource && du -h ./bin/redissource
      - go build -o ./bin/gitsource ./sources/gitsource && du -h ./bin/gitsource
      - go build -o ./bin/mqtttarget ./targets/mqtttarget && du -h ./bin/mqtttarget
      - go build -o ./bin/kafkatarget ./targets/kafkatarget && du -h ./bin/kafkatarget
      - go build -o ./bin/coaptarget ./targets/coaptarget && du -h ./bin/coaptarget
      - go build -o ./bin/httptarget ./targets/httptarget && du -h ./bin/httptarget
      - go build -o ./bin/natstarget ./targets/natstarget && du -h ./bin/natstarget
      - go build -o ./bin/redistarget ./targets/redistarget && du -h ./bin/redistarget
      - go build -o ./bin/plugin ./plugins/plugin && du -h ./bin/plugin
      - tinygo build -o ./bin/wasmrunner.wasm -target=wasi ./runners/wasmrunner && du -h ./bin/wasmrunner.wasm

  run-plugin-config:
    env:
      CONFIG_FILE_PATH: ./testers/config/plugin.config.yaml
    cmds:
      - go run ./src

  run-phpcli-config:
    env:
      CONFIG_FILE_PATH: ./testers/config/phpcli.config.yaml
    cmds:
      - ./bin/events-bridge

  run-wasmrunner-config:
    env:
      CONFIG_FILE_PATH: ./testers/config/wasmrunner.config.yaml
    cmds:
      - ./bin/events-bridge

  run-mqtt-to-http:
    cmds:
      - cat ./testers/config/concurrently/mqtt-to-http.yaml | ./testers/bin/concurrently

  run-pgsql-to-http:
    cmds:
      - cat ./testers/config/concurrently/pgsql-to-http.yaml | ./testers/bin/concurrently

  run-nats-wasm-http:
    cmds:
      - cat ./testers/config/concurrently/nats-wasm-http.yaml | ./testers/bin/concurrently

  run-nats-jlo-http:
    cmds:
      - cat ./testers/config/concurrently/nats-jlo-http.yaml | ./testers/bin/concurrently

  run-nats-jlo-nats:
    cmds:
      - cat ./testers/config/concurrently/nats-jlo-nats.yaml | ./testers/bin/concurrently

  run-gptrunner-config:
    cmds:
      - cat ./testers/config/concurrently/gptrunner.yaml | ./testers/bin/concurrently

  run-kafka-jlo-kafka:
    cmds:
      - cat ./testers/config/concurrently/kafka-jlo-kafka.yaml | ./testers/bin/concurrently

  run-redis-jlo-redis:
    cmds:
      - cat ./testers/config/concurrently/redis-jlo-redis.yaml | ./testers/bin/concurrently

  run-redisstream-jlo-redisstream:
    cmds:
      - cat ./testers/config/concurrently/redis-stream-jlo-redis-stream.yaml | ./testers/bin/concurrently

  run-git-wasm-http:
    cmds:
      - cat ./testers/config/concurrently/git-wasm-http.yaml | ./testers/bin/concurrently
