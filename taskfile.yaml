version: "3"

vars:
  # All Go source files (excluding vendor)
  GO_FILES:
    sh: find . -type f -name '*.go' -not -path "./vendor/*"
  # Package list for analysis scoped to project sources
  GO_PKGS:
    sh: go list ./src/...

tasks:
  default:
    desc: Run default checks (fmt, lint, vet, test)
    cmds:
      - task: fmt
      - task: lint
      - task: vet
      - task: test

  install-tools-mac:
    desc: Install all required Go tools on macOS
    cmds:
      - brew install golangci-lint
      - brew install gosec
      - brew install aquasecurity/trivy/trivy
      - brew install tinygo
      - brew install protoc-gen-go
      - brew install protoc-gen-go-grpc

  fmt-check:
    desc: Check Go code formatting without making changes
    cmds:
      - echo "Running gofmt..."
      - gofmt -d -e -l -s .

  fmt:
    desc: Format Go code with simplification
    cmds:
      - echo "Running gofmt..."
      - gofmt -s -l -w .

  lint:
    desc: Run golangci-lint across the codebase
    cmds:
      - echo "Running golangci-lint..."
      - golangci-lint run

  vet:
    desc: Run static analysis with go vet
    cmds:
      - echo "Running go vet..."
      - go vet ./src/...

  build-wasm-test-assets:
    desc: Build WASM test assets for unit tests
    dir: ./src/connectors/wasm/testassets
    cmds:
      - echo "Building WASM test assets..."
      - GOOS=wasip1 GOARCH=wasm go build -o testrunner.wasm testrunner.go
      - GOOS=wasip1 GOARCH=wasm go build -o errorrunner.wasm errorrunner.go
      - GOOS=wasip1 GOARCH=wasm go build -o timeoutrunner.wasm timeoutrunner.go
      - echo "WASM test assets built successfully"
      - du -h *.wasm

  clean-wasm-test-assets:
    desc: Clean WASM test assets
    dir: ./src/connectors/wasm/testassets
    cmds:
      - echo "Cleaning WASM test assets..."
      - rm -f *.wasm

  build-plugin-test-asset:
    desc: Build test plugin asset for plugin connector unit tests
    dir: ./src/connectors/plugin/testassets
    cmds:
      - echo "Building test plugin asset for connector tests..."
      - go build -o test-plugin-connector testplugin.go && du -h test-plugin-connector

  clean-plugin-test-assets:
    desc: Clean test assets
    dir: ./src/connectors/plugin/testassets
    cmds:
      - echo "Cleaning test assets..."
      - rm -f test-plugin-connector

  test:
    desc: Run tests with race detector and coverage (suppress linker warnings)
    deps:
      - build-wasm-test-assets
      - build-plugin-test-asset
    cmds:
      - echo "Running tests with coverage (clean output)..."
      - |
        set -o pipefail
        go test -race -coverprofile=coverage.out -covermode=atomic ./src/... 2>&1 | \
        grep -v "ld: warning.*malformed LC_DYSYMTAB" || \
        (test ${PIPESTATUS[0]} -eq 0)
      - go tool cover -html=coverage.out -o coverage.html
      - echo "Coverage report generated at coverage.html"

  test-verbose:
    desc: Run tests with race detector and coverage (show all output including warnings)
    deps:
      - build-wasm-test-assets
      - build-plugin-test-asset
    cmds:
      - echo "Running tests with coverage (verbose mode)..."
      - go test -race -coverprofile=coverage.out -covermode=atomic ./src/...
      - go tool cover -html=coverage.out -o coverage.html
      - echo "Coverage report generated at coverage.html"

  test-integration:
    desc: Run integration tests using testcontainers
    cmds:
      - echo "Running Kafka integration tests..."
      - cd ./src/connectors/kafka && go test -tags=integration -v -timeout=120s
      - echo "Running Redis integration tests..."
      - cd ./src/connectors/redis && go test -tags=integration -v -timeout=60s
      - echo "Running PostgreSQL integration tests..."
      - cd ./src/connectors/pgsql && go test -tags=integration -v -timeout=120s
      - echo "All integration tests completed successfully!"

  gosec:
    desc: Run security checks with gosec
    vars:
      GOSEC_INSTALLED:
        sh: command -v gosec || echo "not_found"
    cmds:
      - echo "Running gosec security scanner..."
      - gosec -fmt=json -out=security-report.json ./src/...

  trivy:
    desc: Run Trivy filesystem scanner (vuln, secret, misconfig)
    vars:
    cmds:
      - echo "Running Trivy vulnerability scanner..."
      - trivy fs --scanners vuln,secret,misconfig .
      - trivy fs --format json --output trivy-results.json .

  check:
    desc: Run all checks (fmt, lint, vet, test, gosec, trivy)
    cmds:
      - task: fmt
      - task: lint
      - task: vet
      - task: test
      - task: gosec
      - task: trivy

  install-deps:
    desc: Install and tidy Go module dependencies
    cmds:
      - go mod download
      - go mod tidy

  clean:
    desc: Clean build and analysis artifacts
    cmds:
      - go clean -cache -testcache -modcache
      - rm -rf bin/
      - rm -rf dist/
      - rm -f coverage.out
      - rm -f coverage.html
      - rm -f security-report.json
      - rm -f trivy-results.json
      - task: clean-wasm-test-assets
      - task: clean-plugin-test-assets

  rebuild:
    desc: Clean and then build everything
    cmds:
      - task: clean
      - task: build

  build:
    cmds:
      - mkdir -p ./bin/connectors
      - mkdir -p ./bin/runners
      - |
        echo "Building connector plugins..."
        for d in ./src/connectors/*; do
          [ -d "$d" ] || continue
        name="$(basename "$d")"
        out="./bin/connectors/${name}.so"
        go build -buildmode=plugin -o "$out" "$d" && du -h "$out"
        done
      - go build -o ./bin/events-bridge ./src  && du -h ./bin/events-bridge

  gen-plugin-proto:
    dir: ./src/connectors/plugin/proto
    cmds:
      - protoc --proto_path=. --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative ./plugin.proto

  rebuild-testers:
    desc: Clean and then build testers and tools
    dir: ./testers
    cmds:
      - rm -rf ./bin
      - task: build-testers

  build-goncurrently:
    desc: Build only goncurrently binary
    dir: ./testers
    cmds:
      - mkdir -p ./bin
      - echo "Building goncurrently..."
      - go build -o ./bin/goncurrently ./goncurrently && du -h ./bin/goncurrently

  build-testers:
    dir: ./testers
    cmds:
      - task: build-goncurrently
      - echo "Building testers..."
      - |
        echo "Building tools..."
        for d in ./tools/*; do
          [ -d "$d" ] || continue
          name="$(basename "$d")"
          out="./bin/${name}"
          go build -o "$out" "$d" && du -h "$out"
        done
      - echo "Building test plugin..."
      - go build -o ./bin/plugin ./plugins/plugin && du -h ./bin/plugin
      - echo "Building test wasm..."
      #- tinygo build -o ./bin/wasmrunner.wasm -target=wasi ./runners/wasmrunner && du -h ./bin/wasmrunner.wasm
      - GOOS=wasip1 GOARCH=wasm go build -o ./bin/wasmrunner.wasm ./runners/wasmrunner && du -h ./bin/wasmrunner.wasm

  run:*:
    desc: Run a specified task (e.g., run-mqtt-to-http)
    vars:
      CONFIG_NAME: "{{index .MATCH 0}}"
    cmds:
      - cat ./testers/config/{{.CONFIG_NAME}}.yaml | ./testers/bin/goncurrently
