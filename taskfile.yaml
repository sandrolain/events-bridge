version: "3"

vars:
  # All Go source files (excluding vendor)
  GO_FILES:
    sh: find . -type f -name '*.go' -not -path "./vendor/*"
  # Package list for analysis scoped to project sources
  GO_PKGS:
    sh: go list ./src/...

tasks:
  default:
    desc: Run default checks (fmt, lint, vet, test)
    cmds:
      - task: fmt
      - task: lint
      - task: vet
      - task: test

  install-tools-mac:
    desc: Install all required Go tools on macOS
    cmds:
      - brew install golangci-lint
      - brew install gosec
      - brew install aquasecurity/trivy/trivy
      - brew install tinygo

  fmt-check:
    desc: Format Go code with simplification
    cmds:
      - echo "Running gofmt..."
      - gofmt -d -e -l -s .

  fmt:
    desc: Format Go code with simplification
    cmds:
      - echo "Running gofmt..."
      - gofmt -s -l -w .

  lint:
    desc: Run golangci-lint across the codebase
    cmds:
      - echo "Running golangci-lint..."
      - golangci-lint run

  vet:
    desc: Run static analysis with go vet
    cmds:
      - echo "Running go vet..."
      - go vet ./src/...

  test:
    desc: Run tests with race detector and coverage
    cmds:
      - echo "Running tests with coverage..."
      - go test -v -race -coverprofile=coverage.out -covermode=atomic ./src/...
      - go tool cover -html=coverage.out -o coverage.html

  gosec:
    desc: Run security checks with gosec
    vars:
      GOSEC_INSTALLED:
        sh: command -v gosec || echo "not_found"
    cmds:
      - echo "Running gosec security scanner..."
      - gosec -fmt=json -out=security-report.json ./src/...

  trivy:
    desc: Run Trivy filesystem scanner (vuln, secret, misconfig)
    vars:
    cmds:
      - echo "Running Trivy vulnerability scanner..."
      - trivy fs --scanners vuln,secret,misconfig .
      - trivy fs --format json --output trivy-results.json .

  check:
    desc: Run all checks (fmt, lint, vet, test, gosec, trivy)
    cmds:
      - task: fmt
      - task: lint
      - task: vet
      - task: test
      - task: gosec
      - task: trivy

  install-deps:
    desc: Install and tidy Go module dependencies
    cmds:
      - go mod download
      - go mod tidy

  clean:
    desc: Clean build and analysis artifacts
    cmds:
      - go clean
      - rm -rf bin/
      - rm -rf dist/
      - rm -f coverage.out
      - rm -f coverage.html
      - rm -f security-report.json
      - rm -f trivy-results.json

  build:
    cmds:
      - rm -rf ./bin
      - mkdir -p ./bin/connectors
      - mkdir -p ./bin/runners
      - go build -buildmode=plugin -o ./bin/connectors/http.so ./src/connectors/http && du -h ./bin/connectors/http.so
      - go build -buildmode=plugin -o ./bin/connectors/coap.so ./src/connectors/coap && du -h ./bin/connectors/coap.so
      - go build -buildmode=plugin -o ./bin/connectors/nats.so ./src/connectors/nats && du -h ./bin/connectors/nats.so
      - go build -buildmode=plugin -o ./bin/connectors/mqtt.so ./src/connectors/mqtt && du -h ./bin/connectors/mqtt.so
      - go build -buildmode=plugin -o ./bin/connectors/pgsql.so ./src/connectors/pgsql && du -h ./bin/connectors/pgsql.so
      - go build -buildmode=plugin -o ./bin/connectors/kafka.so ./src/connectors/kafka && du -h ./bin/connectors/kafka.so
      - go build -buildmode=plugin -o ./bin/connectors/redis.so ./src/connectors/redis && du -h ./bin/connectors/redis.so
      - go build -buildmode=plugin -o ./bin/connectors/git.so ./src/connectors/git && du -h ./bin/connectors/git.so
      - go build -buildmode=plugin -o ./bin/runners/es5.so ./src/runners/es5runner && du -h ./bin/runners/es5.so
      - go build -buildmode=plugin -o ./bin/runners/wasm.so ./src/runners/wasmrunner && du -h ./bin/runners/wasm.so
      - go build -buildmode=plugin -o ./bin/runners/gtp.so ./src/runners/gptrunner && du -h ./bin/runners/gtp.so
      - go build -buildmode=plugin -o ./bin/runners/jsonlogic.so ./src/runners/jlorunner && du -h ./bin/runners/jsonlogic.so
      - go build -o ./bin/events-bridge ./src  && du -h ./bin/events-bridge

  gen-plugin-proto:
    dir: ./src/plugin/proto
    cmds:
      - protoc --proto_path=. --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative ./plugin.proto

  build-testers:
    dir: ./testers
    cmds:
      - mkdir -p ./bin
      - go build -o ./bin/goncurrently ./goncurrently && du -h ./bin/goncurrently
      - go build -o ./bin/natstool ./tools/natstool && du -h ./bin/natstool
      - go build -o ./bin/coaptool ./tools/coaptool && du -h ./bin/coaptool
      - go build -o ./bin/pgsqltool ./tools/pgsqltool && du -h ./bin/pgsqltool
      - go build -o ./bin/mqtttool ./tools/mqtttool && du -h ./bin/mqtttool
      - go build -o ./bin/httptool ./tools/httptool && du -h ./bin/httptool
      - go build -o ./bin/kafkatool ./tools/kafkatool && du -h ./bin/kafkatool
      - go build -o ./bin/redistool ./tools/redistool && du -h ./bin/redistool
      - go build -o ./bin/gittool ./tools/gittool && du -h ./bin/gittool
      - go build -o ./bin/plugin ./plugins/plugin && du -h ./bin/plugin
      - tinygo build -o ./bin/wasmrunner.wasm -target=wasi ./runners/wasmrunner && du -h ./bin/wasmrunner.wasm

  run:*:
    desc: Run a specified task (e.g., run-mqtt-to-http)
    vars:
      CONFIG_NAME: "{{index .MATCH 0}}"
    cmds:
      - cat ./testers/config/goncurrently/{{.CONFIG_NAME}}.yaml | ./testers/bin/goncurrently
