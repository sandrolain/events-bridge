# Redis Connector Security Examples
# Demonstrates authentication, TLS encryption, and command injection prevention

---
# Example 1: Redis PubSub with password authentication and TLS
source:
  type: redis
  address: "redis.example.com:6379"
  channel: "events:channel"
  password: "your-secure-password"
  db: 0
  strictValidation: true
  tls:
    enabled: true
    minVersion: "1.2"
    caFile: "/path/to/ca.pem"

target:
  type: http
  url: "http://localhost:8080/events"
  method: POST

---
# Example 2: Redis Stream with ACL authentication (username + password)
source:
  type: redis
  address: "redis.example.com:6379"
  stream: "events:stream"
  username: "stream-reader"
  password: "stream-password"
  consumerGroup: "processors"
  consumerName: "processor-1"
  db: 1
  strictValidation: true
  tls:
    enabled: true
    minVersion: "1.3"
    caFile: "/path/to/ca.pem"
    certFile: "/path/to/client-cert.pem"
    keyFile: "/path/to/client-key.pem"

target:
  type: http
  url: "http://localhost:8080/stream-events"
  method: POST

---
# Example 3: HTTP to Redis Stream with TLS (mutual TLS)
source:
  type: http
  address: ":8081"
  path: "/publish"

target:
  type: redis
  address: "redis.example.com:6379"
  stream: "published:events"
  username: "publisher"
  password: "publisher-password"
  db: 2
  strictValidation: true
  tls:
    enabled: true
    minVersion: "1.3"
    caFile: "/path/to/ca.pem"
    certFile: "/path/to/client-cert.pem"
    keyFile: "/path/to/client-key.pem"
    verifyConnection: true

---
# Example 4: Redis PubSub to Redis Stream with different authentication
source:
  type: redis
  address: "redis-source.example.com:6379"
  channel: "source:channel"
  password: "source-password"
  db: 0
  strictValidation: true
  tls:
    enabled: true
    minVersion: "1.2"
    caFile: "/path/to/source-ca.pem"

target:
  type: redis
  address: "redis-target.example.com:6379"
  stream: "target:stream"
  username: "target-user"
  password: "target-password"
  db: 1
  strictValidation: true
  tls:
    enabled: true
    minVersion: "1.2"
    caFile: "/path/to/target-ca.pem"

---
# Example 5: Redis with dynamic channel/stream resolution (metadata-based)
# StrictValidation prevents command injection via metadata
source:
  type: http
  address: ":8082"
  path: "/forward"

target:
  type: redis
  address: "redis.example.com:6379"
  channel: "default:channel" # Default channel
  # Channel can be overridden via message metadata with "channel" key
  username: "forwarder"
  password: "forwarder-password"
  strictValidation: true # Validates dynamically resolved channel names
  tls:
    enabled: true
    minVersion: "1.2"

---
# Example 6: Redis without TLS (password-only auth, for testing)
# Not recommended for production
source:
  type: redis
  address: "localhost:6379"
  channel: "test:channel"
  password: "test-password"
  db: 0
  strictValidation: true

target:
  type: http
  url: "http://localhost:8080/test"
  method: POST
